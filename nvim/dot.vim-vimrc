set packpath^=~/.vim
packadd minpac

call minpac#init()

" minpac must have {'type': 'opt'} so that it can be loaded with `packadd`.
call minpac#add('k-takata/minpac', {'type': 'opt'})

" Install or update plugins
" in nvim, type ':PackUpdate' to install/update packages
" type ':PackStatus' to see the results
command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()
command! PackStatus call minpac#status()

" Add other plugins here.
call minpac#add('tpope/vim-unimpaired')
call minpac#add('junegunn/fzf')
call minpac#add('alvan/vim-closetag')
call minpac#add('sirver/ultisnips')
call minpac#add('tomtom/tcomment_vim')
nnoremap <C-p> :<C-u>FZF<CR>

" Load the plugins right now. (optional)
"packloadall

" netrw tree customizations
let g:netrw_banner = 0
let g:netrw_liststyle = 3

" terminal
tnoremap <Esc> <C-\><C-n>

" json
nmap =j :%!python -m json.tool<CR>

" ==============
" customization
" ==============
set autoindent
" set hidden
set shiftwidth=2
let &softtabstop = &shiftwidth
set expandtab
" set wordwrap
set wrap linebreak nolist

" ctrl+a to select all
map <C-a> <esc>ggVG<CR>
" ctrl+c to copy selected text in visual mode to system clipboard
vnoremap <C-c> :w !pbcopy<CR><CR>

" spelling
hi clear SpellBad
hi SpellBad cterm=underline,bold ctermfg=red


" ==============
" colors
" :runtime syntax/colortest.vim
" :syn off | on
" ==============
syntax on
"colo atom-dark-256
"hi htmlString ctermfg=114
"hi javaScriptStringS ctermfg=114
"hi javaScriptStringD ctermfg=114
"hi javaScriptStringT ctermfg=114
"hi javaScriptLabel ctermfg=114

colo github-custom

"hi Normal ctermbg=white
"hi MatchParen cterm=bold ctermbg=none ctermfg=yellow

" place your cursor on the item you want to inspect
" and type :call SynStack() 
" It will return the syntax group that matches the item for styling
function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" :call SynColor()
function! SynColor()
  if !exists("*synstack")
    return
  endif
  echo synIDattr(synIDtrans(synID(line("."), col("."), 1)), "fg")
endfunc



" ===========================
" vim-closetag customization
" ===========================
inoremap jj <
" filenames like *.xml, *.html, *.xhtml, ...
" These are the file extensions where this plugin is enabled.
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

" filenames like *.xml, *.xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" filetypes like xml, html, xhtml, ...
" These are the file types where this plugin is enabled.
let g:closetag_filetypes = 'html,xhtml,phtml'

" filetypes like xml, xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filetypes = 'xhtml,jsx'

" integer value [0|1]
" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
let g:closetag_emptyTags_caseSensitive = 1

" Shortcut for closing tags, default is '>'
let g:closetag_shortcut = ';;'

" Add > at current position without closing the current tag, default is ''
let g:closetag_close_shortcut = '<leader>>'


" ===========================
" ultisnips customization
" ===========================
set runtimepath+=~/.vim/pack/minpac/start/ultisnips/
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/snips']
